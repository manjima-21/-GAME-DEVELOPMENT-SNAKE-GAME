#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <string>
using namespace sf;
const int WIDTH = 800;
const int HEIGHT = 600;
const int SIZE = 20;
int main() {
    srand(time(0));
    RenderWindow window(VideoMode(WIDTH, HEIGHT), "Snake Game");
    window.setFramerateLimit(60);

    Font font;
    if (!font.loadFromFile("assets/arial.ttf")) return -1;

    SoundBuffer eatBuffer, overBuffer, pauseBuffer;
    if (!eatBuffer.loadFromFile("assets/eat.wav")) return -1;
    if (!overBuffer.loadFromFile("assets/gameover.wav")) return -1;
    if (!pauseBuffer.loadFromFile("assets/pause.wav")) return -1;

    Sound eatSound(eatBuffer);
    Sound overSound(overBuffer);
    Sound pauseSound(pauseBuffer);

    std::vector<Vector2i> snake;
    snake.push_back(Vector2i(10, 10));

    Vector2i direction(1, 0);

    Vector2i food(rand() % (WIDTH / SIZE), rand() % (HEIGHT / SIZE));
    Color foodColor(rand() % 256, rand() % 256, rand() % 256);

    Clock clock;
    float timer = 0;
    float delay = 0.1f;

    bool gameOver = false;
    bool paused = false;

    int score = 0;
    int highScore = 0;

    while (window.isOpen()) {
        float time = clock.restart().asSeconds();
        if (!paused && !gameOver) timer += time;

        Event event;
        while (window.pollEvent(event)) {
            if (event.type == Event::Closed) window.close();
        }

        if (!paused && !gameOver) {
            if (Keyboard::isKeyPressed(Keyboard::W) && direction.y != 1) direction = Vector2i(0, -1);
            else if (Keyboard::isKeyPressed(Keyboard::S) && direction.y != -1) direction = Vector2i(0, 1);
            else if (Keyboard::isKeyPressed(Keyboard::A) && direction.x != 1) direction = Vector2i(-1, 0);
            else if (Keyboard::isKeyPressed(Keyboard::D) && direction.x != -1) direction = Vector2i(1, 0);
        }

        if (Keyboard::isKeyPressed(Keyboard::P)) {
            if (!paused) {
                paused = true;
                pauseSound.play();
            }
        }
        if (Keyboard::isKeyPressed(Keyboard::O)) {
            if (paused) {
                paused = false;
                pauseSound.play();
            }
        }

        if (gameOver && Keyboard::isKeyPressed(Keyboard::R)) {
            snake.clear();
            snake.push_back(Vector2i(10, 10));
            direction = Vector2i(1, 0);
            delay = 0.1f;
            food = Vector2i(rand() % (WIDTH / SIZE), rand() % (HEIGHT / SIZE));
            foodColor = Color(rand() % 256, rand() % 256, rand() % 256);
            score = 0;
            gameOver = false;
            paused = false;
        }

        if (timer > delay && !gameOver && !paused) {
            timer = 0;
            Vector2i head = snake.front();
            head += direction;

            if (head.x < 0 || head.y < 0 || head.x >= WIDTH / SIZE || head.y >= HEIGHT / SIZE) {
                gameOver = true;
                overSound.play();
                if (score > highScore) highScore = score;
            }

            for (int i = 1; i < (int)snake.size(); i++) {
                if (snake[i] == head) {
                    gameOver = true;
                    overSound.play();
                    if (score > highScore) highScore = score;
                }
            }

            snake.insert(snake.begin(), head);

            if (head == food) {
                food = Vector2i(rand() % (WIDTH / SIZE), rand() % (HEIGHT / SIZE));
                foodColor = Color(rand() % 256, rand() % 256, rand() % 256);
                eatSound.play();
                score += 10;
                if (delay > 0.03f) delay -= 0.005f;
            } else {
                snake.pop_back();
            }
        }

        window.clear(Color::Black);

        // Draw grid lines
        RectangleShape line(Vector2f(WIDTH, 1));
        line.setFillColor(Color(50, 50, 50));
        for (int i = 0; i <= HEIGHT; i += SIZE) {
            line.setPosition(0, i);
            window.draw(line);
        }
        line.setSize(Vector2f(1, HEIGHT));
        for (int i = 0; i <= WIDTH; i += SIZE) {
            line.setPosition(i, 0);
            window.draw(line);
        }

        // Draw food
        RectangleShape foodRect(Vector2f(SIZE - 2, SIZE - 2));
        foodRect.setFillColor(foodColor);
        foodRect.setPosition(food.x * SIZE, food.y * SIZE);
        window.draw(foodRect);

        // Draw snake
        RectangleShape snakeRect(Vector2f(SIZE - 2, SIZE - 2));
        snakeRect.setFillColor(Color::Green);
        for (auto& part : snake) {
            snakeRect.setPosition(part.x * SIZE, part.y * SIZE);
            window.draw(snakeRect);
        }

        // Draw score
        Text scoreText("Score: " + std::to_string(score), font, 20);
        scoreText.setFillColor(Color::White);
        scoreText.setPosition(5, 5);
        window.draw(scoreText);

        Text highScoreText("High Score: " + std::to_string(highScore), font, 20);
        highScoreText.setFillColor(Color::White);
        highScoreText.setPosition(5, 30);
        window.draw(highScoreText);

        if (paused) {
            Text pauseText("Paused! Press O to resume", font, 30);
            pauseText.setFillColor(Color::Yellow);
            pauseText.setPosition(WIDTH / 2 - 150, HEIGHT / 2 - 30);
            window.draw(pauseText);
        }

        if (gameOver) {
            Text overText("Game Over! Press R to restart", font, 40);
            overText.setFillColor(Color::Red);
            overText.setPosition(WIDTH / 2 - 180, HEIGHT / 2 - 50);
            window.draw(overText);
        }

        window.display();
    }
    return 0;
}
